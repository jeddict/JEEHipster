/**
 * Copyright [2018] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package io.github.jeddict.client.react;

import io.github.jeddict.jcode.console.Console;
import static io.github.jeddict.jcode.console.Console.BOLD;
import static io.github.jeddict.jcode.console.Console.FG_DARK_RED;
import static io.github.jeddict.jcode.console.Console.UNDERLINE;
import static io.github.jeddict.jcode.util.FileUtil.getFileExt;
import io.github.jeddict.jcode.util.POMManager;
import io.github.jeddict.jcode.layer.Generator;
import io.github.jeddict.jcode.layer.Technology;
import static io.github.jeddict.jcode.layer.Technology.Type.VIEWER;
import io.github.jeddict.jcode.parser.ejs.EJSParser;
import static io.github.jeddict.jcode.parser.ejs.EJSUtil.copyDynamicFile;
import static io.github.jeddict.jcode.parser.ejs.EJSUtil.copyDynamicResource;
import static io.github.jeddict.jcode.parser.ejs.EJSUtil.getResource;
import io.github.jeddict.jpa.spec.Entity;
import io.github.jeddict.jpa.spec.extend.BaseAttribute;
import io.github.jeddict.jpa.spec.extend.RelationAttribute;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import static java.util.stream.Collectors.toList;
import static io.github.jeddict.client.angular.AngularGenerator.ANGULAR_TEMPLATE;
import io.github.jeddict.client.react.domain.ReactApplicationConfig;
import io.github.jeddict.client.react.domain.ReactField;
import io.github.jeddict.client.react.domain.ReactRelationship;
import io.github.jeddict.client.web.main.BaseWebGenerator;
import io.github.jeddict.client.web.main.domain.ApplicationSourceFilter;
import io.github.jeddict.client.web.main.domain.EntityConfig;
import io.github.jeddict.client.web.main.domain.BaseApplicationConfig;
import io.github.jeddict.client.web.main.domain.BaseEntity;
import io.github.jeddict.client.web.main.domain.BaseField;
import io.github.jeddict.client.web.main.domain.BaseRelationship;
import io.github.jeddict.client.web.main.domain.Needle;
import io.github.jeddict.client.web.main.domain.NeedleFile;
import io.github.jeddict.client.react.domain.ReactEntity;
import io.github.jeddict.rest.controller.RESTGenerator;
import static io.github.jeddict.rest.controller.RESTGenerator.isAutoGeneratedEntity;
import org.openide.filesystems.FileLock;
import org.openide.filesystems.FileObject;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.util.lookup.ServiceProvider;
import org.apache.commons.io.IOUtils;
import static io.github.jeddict.jcode.parser.ejs.EJSUtil.insertNeedle;

/**
 *
 * @author Gaurav Gupta
 */
@ServiceProvider(service = Generator.class)
@Technology(type = VIEWER,
        label = "React",
        panel = ReactPanel.class,
        parents = {RESTGenerator.class},
        microservice = true,
        listIndex = 2
)
public class ReactGenerator extends BaseWebGenerator {

    public static final String REACT_TEMPLATE = "io/github/jeddict/client/react/template/";
    private static final String CLIENT_FRAMEWORK = "react";
    private ApplicationSourceFilter fileFilter;

    private final Function<String, String> PATH_RESOLVER = (templatePath) -> {
        String ext = getFileExt(templatePath);
        if (!fileFilter.isEnable(templatePath)) {
            return null;
        }
        if (templatePath.contains("/_")) {
            templatePath = templatePath.replaceAll("/_", "/");
        } else if (templatePath.charAt(0) == '_') { //_index.html
            templatePath = templatePath.substring(1);
        }
        return templatePath;
    };

    @Override
    protected void generateClientSideComponent() {
        try {
            BaseApplicationConfig applicationConfig = getAppConfig();
            fileFilter = getApplicationSourceFilter(applicationConfig);
            List<BaseEntity> webEntities = new ArrayList<>();
            if (appConfigData.isMonolith() || appConfigData.isMicroservice()) {
                Map<String, String> templateLib = getResource(getTemplatePath() + "entity-include-resources.zip");
                List<Entity> entities = entityMapping.getGeneratedEntity().collect(toList());
                if (!entities.isEmpty()) {
                    handler.append(Console.wrap(this.getClass(), "MSG_Copying_Entity_Files", FG_DARK_RED, BOLD, UNDERLINE));
                }

                for (Entity entity : entities) {
                    if (isAutoGeneratedEntity(entity.getClazz())) {
                        continue;
                    }
                    BaseEntity webEntity = getEntity(applicationConfig, entity);
                    if (webEntity != null) {
                        webEntities.add(webEntity);
                        webEntity.setUpgrade(appConfigData.isCompleteApplication() ? false
                                : webRoot.getFileObject("app/entities/" + webEntity.getEntityFolderName()) != null
                        );
                        EntityConfig entityConfig = getEntityConfig(entity);
                        generateEntity(applicationConfig, entityConfig, webEntity, templateLib);
                        generateEntityTest(applicationConfig, entityConfig, webEntity);
                        generateEntityi18nResource(applicationConfig, fileFilter, webEntity);
                    }
                }
                generateEnumi18nResource(applicationConfig, fileFilter);
                applicationConfig.setEntities(webEntities);
            }

            if (appConfigData.isMonolith() || appConfigData.isGateway()) {
                if (appConfigData.isCompleteApplication()) {
                    EJSParser parser = new EJSParser();
                    parser.addContext(applicationConfig);
                    parser.eval(IOUtils.toString(getClass().getResourceAsStream(ANGULAR_TEMPLATE+"custom-web.js"), "UTF-8"));
                    generateApplication(parser);
                    generateTest(parser);
                    generateApplicationi18nResource(applicationConfig, fileFilter);
//              generateLocaleResource(applicationConfig);
                    generateHome(applicationConfig, parser);
                }
            }

            updateEntityNeedle(applicationConfig, webEntities);

//            installYarn(project.getProjectDirectory());
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
    }

//    public void installYarn(FileObject workingFolder){
//        handler.append(Console.wrap(this.getClass(), "YARN_INSTALL", FG_DARK_RED, BOLD, UNDERLINE));
//        executeCommand(workingFolder,handler, "yarn", "install");
//    }
    protected void generateEntity(BaseApplicationConfig applicationConfig,
            EntityConfig config, BaseEntity entity, Map<String, String> templateLib) throws IOException {
        EJSParser parser = new EJSParser();
        parser.addContext(applicationConfig);
        parser.addContext(entity);
        parser.addContext(config);

        parser.setImportTemplate(templateLib);
        parser.eval(IOUtils.toString(getClass().getResourceAsStream(ANGULAR_TEMPLATE+"custom-entity.js"), "UTF-8"));
        copyDynamicResource(parser.getParserManager(), getTemplatePath() + "entity-resources.zip", webRoot, getEntityPathResolver(entity), handler);
    }

    private Function<String, String> getEntityPathResolver(BaseEntity entity) {
        Function<String, String> ENTITY_PATH_RESOLVER = (templatePath) -> {
            String ext = templatePath.substring(templatePath.lastIndexOf('.') + 1);
            if (!fileFilter.isEnable(templatePath)) {
                return null;
            }
            if (templatePath.contains("_entity-management")) {
                templatePath = templatePath.replace("_entity-management", entity.getEntityFolderName() + '/' + entity.getEntityFileName());
            } else if (templatePath.contains("_entity.service.ts")
                    || templatePath.contains("_entity.model.ts")
                    || templatePath.contains("_entity-popup.service.ts")) {
                templatePath = templatePath.replace("_entity", entity.getEntityFolderName() + '/' + entity.getEntityServiceFileName());
            } else if (templatePath.contains("_index.ts")) {
                templatePath = templatePath.replace("_index", entity.getEntityFolderName() + "/index");
            } else if (templatePath.contains("_entity.spec.ts")) {
                templatePath = templatePath.replace("_entity", entity.getEntityServiceFileName());
            }

            return templatePath;
        };
        return ENTITY_PATH_RESOLVER;
    }

    private void updateEntityNeedle(BaseApplicationConfig applicationConfig, List<BaseEntity> webEntities) {
        for (NeedleFile needleFile : getNeedleFiles(applicationConfig)) {
            if (appConfigData.isMonolith()) {
                if (!appConfigData.isCompleteApplication() && !needleFile.forEntity()) {
                    continue;
                }
            } else if (appConfigData.isMicroservice()) {
                if (!needleFile.forEntity()) {
                    continue;
                }
            } else if (appConfigData.isGateway()) {
                if (needleFile.forEntity()) {
                    continue;
                }
            }
            
            for (String file : needleFile.getFile()) {
                needleFile.getNeedles().forEach(needle
                        -> insertNeedle(file.startsWith("/") ? projectRoot : webRoot,
                                file, needle.getInsertPointer(),
                                needle.getTemplate(applicationConfig, needleFile.forEntity() ? webEntities : null),
                                handler)
                );
            }
        }
    }

    private List<NeedleFile> getNeedleFiles(BaseApplicationConfig applicationConfig) {
        List<NeedleFile> needleFiles = new ArrayList<>();

        NeedleFile ENTITY_MODULE_TS = new NeedleFile("app/entities/entity.module.ts");
        ENTITY_MODULE_TS.setNeedles(Arrays.asList(
                //appName -> getAngularXAppName
                new Needle("needle-add-entity-module-import", "import { ${appName}${entityReactName}Module } from './${entityFolderName}/${entityFileName}.module';\n"),
                new Needle("needle-add-entity-module", "        ${appName}${entityReactName}Module,\n")
        ));
        needleFiles.add(ENTITY_MODULE_TS);

        NeedleFile NAVBAR_COMPONENT_HTML = new NeedleFile("app/layouts/navbar/navbar.component.html");
        NAVBAR_COMPONENT_HTML.setNeedles(Arrays.asList(
                new Needle("needle-add-entity-to-menu",
                        "                    <li>\n"
                        + "                        <a class=\"dropdown-item\" routerLink=\"${routerName}\" routerLinkActive=\"active\" [routerLinkActiveOptions]=\"{ exact: true }\" (click)=\"collapseNavbar()\">\n"
                        + "                            <i class=\"fa fa-fw fa-asterisk\" aria-hidden=\"true\"></i>\n"
                        + "                            <span <#if enableTranslation>${prefix}Translate=\"global.menu.entities.${camelCase_routerName}\"</#if>>${startCase_routerName}</span>\n"
                        + "                        </a>\n"
                        + "                    </li>\n")
        ));
        needleFiles.add(NAVBAR_COMPONENT_HTML);

        if (applicationConfig.isEnableTranslation()) {
            for (String language : applicationConfig.getLanguages()) {
                NeedleFile GLOBAL_JSON = new NeedleFile("i18n/" + language + "/global.json");
                GLOBAL_JSON.setNeedles(Arrays.asList(
                        new Needle("needle-menu-add-entry", "\t\t\"${entityTranslationKeyMenu}\": \"${startCase_entityClass}\",\n")
                ));
                needleFiles.add(GLOBAL_JSON);
            }
        }

        NeedleFile LANGUAGE_WEBPACK = new NeedleFile("/webpack/webpack.common.js");
        LANGUAGE_WEBPACK.setNeedles(Arrays.asList(
                new Needle("needle-i18n-language-webpack",
                        "<#list languages as language>"
                        + "                               { pattern: \"./${srcDir}i18n/${language}/*.json\", fileName: \"./i18n/${language}.json\" }<#if language_has_next>,</#if>\n"
                        + "</#list>")
        ));
        LANGUAGE_WEBPACK.setEntity(false);
        needleFiles.add(LANGUAGE_WEBPACK);

        NeedleFile LANGUAGE_KEYPIPE = new NeedleFile("app/shared/language/find-language-from-key.pipe.ts");
        LANGUAGE_KEYPIPE.setNeedles(Arrays.asList(
                new Needle("needle-i18n-language-key-pipe",
                        "<#list languageInstances as language>"
                        + "        '${language.value}': { name: '${language.dispName}' }<#if language_has_next>,</#if>\n"
                        + "</#list>")
        ));
        LANGUAGE_KEYPIPE.setEntity(false);
        needleFiles.add(LANGUAGE_KEYPIPE);
        return needleFiles;
    }

    private void addMavenDependencies(String pom) {
        if (POMManager.isMavenProject(project)) {
            POMManager pomManager = new POMManager(REACT_TEMPLATE + pom, project);
            pomManager.commit();
        } else {
            handler.warning(NbBundle.getMessage(this.getClass(), "TITLE_Maven_Project_Not_Found"), NbBundle.getMessage(this.getClass(), "MSG_Maven_Project_Not_Found"));
        }
    }

    private void generateHome(BaseApplicationConfig applicationConfig, EJSParser parser) throws IOException {
        Function<String, String> pathResolver = templatePath -> templatePath.replace("_", "");// "_index.html" ->  "tabIndex.html";
        copyDynamicResource(parser.getParserManager(), getTemplatePath() + "project-resources.zip", projectRoot, pathResolver, handler);

//        parser.setDelimiter('#');//nested template
//        copyDynamicFile(parser.getParserManager(), getTemplatePath() + "_index.html", webRoot, "tabIndex.html", handler);
        FileObject nbactionsFile = projectRoot.getFileObject("nbactions.xml");
        if (nbactionsFile == null) {
            copyDynamicFile(parser.getParserManager(), getTemplatePath() + "webpack_nbactions.xml", projectRoot, "nbactions.xml", handler);
        }
        handler.info(NbBundle.getMessage(this.getClass(), "WEBPACK_PROFILE_TITLE"),
                NbBundle.getMessage(this.getClass(), "WEBPACK_PROFILE_TEXT",
                        applicationConfig.getClientPackageManager()));

        String pomPath = applicationConfig.getClientPackageManager() + "_" + (applicationConfig.isUseSass() ? "sass_" : "");
        addMavenDependencies("pom/" + pomPath + "pom.xml");
        appConfigData.addProfile("webpack");
    }

    private void removeUnwantedFile() throws IOException {
//        rename tabIndex.html
        FileObject indexFile = webRoot.getFileObject("index.html");
        if (indexFile != null) {
            FileLock lock = indexFile.lock();
            indexFile.rename(lock, "index_" + new Date().getTime(), "html");
            lock.releaseLock();
        }
    }

    protected void generateApplication(EJSParser parser) throws IOException {
        handler.append(Console.wrap(this.getClass(), "MSG_Copying_Application_Files", FG_DARK_RED, BOLD, UNDERLINE));
        List<String> skipList = Arrays.asList("_find-language-from-key.pipe.ts");//charset issue 
        copyDynamicResource(parser.getParserManager(), getTemplatePath() + "web-resources.zip", webRoot, PATH_RESOLVER, handler);
    }

    protected void generateTest(EJSParser parser) throws IOException {
//        FileObject javascriptRoot = testRoot.createFolder("javascript");
        copyDynamicResource(parser.getParserManager(), getTemplatePath() + "karma-test.zip", testRoot, PATH_RESOLVER, handler);
        if (webData.isProtractorTest()) {
            copyDynamicResource(parser.getParserManager(), getTemplatePath() + "protractor-test.zip", testRoot, PATH_RESOLVER, handler);
        }
    }

    protected void generateEntityTest(BaseApplicationConfig applicationConfig, EntityConfig config, BaseEntity entity) throws IOException {
        EJSParser parser = new EJSParser();
        parser.addContext(applicationConfig);
        parser.addContext(entity);
        parser.addContext(config);
        copyDynamicResource(parser.getParserManager(), getTemplatePath() + "entity-karma-test.zip", testRoot, getEntityPathResolver(entity), handler);
        if (webData.isProtractorTest()) {
            copyDynamicResource(parser.getParserManager(), getTemplatePath() + "entity-protractor-test.zip", testRoot, getEntityPathResolver(entity), handler);
        }
    }

    @Override
    public String getTemplatePath() {
        return REACT_TEMPLATE;
    }

    @Override
    protected String getClientFramework() {
        return CLIENT_FRAMEWORK;
    }

    @Override
    protected ApplicationSourceFilter getApplicationSourceFilter(BaseApplicationConfig applicationConfig) {
        return new ReactSourceFilter(applicationConfig);
    }

    @Override
    public BaseApplicationConfig getApplicationConfig(String baseName, String buildTool) {
        return new ReactApplicationConfig(baseName, buildTool);
    }

    @Override
    public BaseEntity getEntity(String appName, String entitySuffix) {
        return new ReactEntity(appName, entitySuffix);
    }

    @Override
    public BaseRelationship getRelationship(String appName, String entitySuffix, Entity entity, RelationAttribute relation) {
        return new ReactRelationship(appName, entitySuffix, entity, relation);
    }

    @Override
    public BaseField getField(BaseAttribute attribute) {
        return new ReactField(attribute);
    }

}
